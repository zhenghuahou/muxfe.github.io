<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>筑室因藏善本书</title>
  <subtitle>随笔杂记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://muxfe.github.io/"/>
  <updated>2018-01-10T12:43:25.000Z</updated>
  <id>http://muxfe.github.io/</id>
  
  <author>
    <name>萧暮Kyer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2017 年终总结</title>
    <link href="http://muxfe.github.io/2018/01/01/2017-review/"/>
    <id>http://muxfe.github.io/2018/01/01/2017-review/</id>
    <published>2018-01-01T03:03:20.000Z</published>
    <updated>2018-01-10T12:43:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>转眼研究生学业过半，马上就要去找实习、找工作，回想两年前也是这个时候，觉得自己技术能力一片空白，只有一些玩具性质的学习项目，没有竞赛等亮眼的简历条目。</p>
<p>而今又过了两年，有成长也有思考，自身能力提升的速度跟技术发展速度相比还是小巫见大巫。负责开发的项目多了，框架使用多了，也做了一些技术之外的事情，总体还是对自己的改变感到欣慰。</p>
<a id="more"></a>
<h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p>个人导师项目比较多，研一到研二的变化就是从做部分项目到负责自己的项目。年初的三车项目，年中的警务大数据重构及文档格式检查工具的收尾，年末的桥梁检测系统，每一次都在更进一步。</p>
<h3 id="三车系统"><a href="#三车系统" class="headerlink" title="三车系统"></a>三车系统</h3><p>三车项目在实验室已经做了超过 3 年，年初时已基本上线第二版，只包含后端部分。由于甲方前端调整，年初移交了前端网页及 SpringMVC 部分，需要快速上手修改及添加新功能。在这个项目中经验式地学到了 SpringMVC 风格的 JavaEE 写法，没有从书本或官网文档学习，直接从项目源码学习并修改。总体来说，接过来的前端代码比较粗放，亟需重构和简化，然而由于项目过于庞大、甲方需求过于急促，所以直到年底这一需求才被提上日程，重构方案应该会写在明年的年终总结里吧。</p>
<h3 id="警务大数据"><a href="#警务大数据" class="headerlink" title="警务大数据"></a>警务大数据</h3><p>已经做了一年的项目，类似三车，我在其中主要做了前端部分的重构，从 Servelet + JSP 技术栈转为 SpringBoot + React。重构过程中学习了 React 技术栈。我的前端学习路线是 <code>jQuery -&gt; Angular1 -&gt; React -&gt; Vue</code>，初次接触 React 着实花了很长时间理解和适应。组件生命周期，Redux 单向数据流，跟 Angular1 相比没有了双向绑定和自由使用第三方库，初期还是很痛苦的。但随着整体技术栈的其他优点，渐渐地也喜欢上了这样的方式。热替换、ES6 语法糖、以及 Webpack 的按需打包等等，要比 Angular1 混合 jQuery，再加 gulp、grunt 打包便利得多。</p>
<h3 id="文档格式检查工具"><a href="#文档格式检查工具" class="headerlink" title="文档格式检查工具"></a>文档格式检查工具</h3><p>研一开始中途接的项目，已经进行了一大半，是一个用 C# 程序自动检测并报告 Word 文档中的错误及自动修复错误的工具，我在其中帮助修改其 Web 端服务，主要面向 C# 端做用户交互接口和 Oracle 存储、统计。使用了 JavaEE + Angular1 技术栈，JavaEE 部分纯用 Servlet + MVC 模式，没有使用其他框架，这让我的开发繁琐之余也学到了一些代码重构的思路，基于 DRY 原则，在项目中几乎每次重新开始都需要重构一次。这个项目终于在 17 年验收成功结束了。</p>
<h3 id="桥梁检测系统"><a href="#桥梁检测系统" class="headerlink" title="桥梁检测系统"></a>桥梁检测系统</h3><p>年底实验室接的一个新项目，我在其中做 Team Leader。老实说，这是个很难的工作，需要设计整体架构，做技术攻关，协调沟通等等，对我来说是个挑战。这个项目涉及很多桥梁领域知识，难度不大，但工作繁重，有很大的专业知识壁垒，涉及大量不同桥型、构件及评估统计信息。</p>
<p>有了以前的项目经验积累，直接使用了 SpringBoot + Jpa + Vue + Element-UI 的技术栈，前后端分离开发，后端工作量骤减，前端得益于于 Vue 及 Vuex 的便利，在实现上没有遇到什么大难题。这个项目还包含一个运行在平板上的安卓端 app，有两个同学开发安卓，由于一开始没有使用 MVVM 模式的框架，虽然界面开发速度很快，但在需要集成时就变得捉襟见肘。</p>
<p>为了跟进安卓端进度，我简单学习了一周的安卓开发，跟大家商定选择了一个相对容易上手的开发脚手架，<a href="https://github.com/goldze/MVVMHabit" target="_blank" rel="noopener">MVVMHabit</a>，主要集成了网络请求和 Data Binding，联调和集成比较方便。在 app 端遇到一个技术难题，是关于甲方提出的一个绘制病害示意图（矢量图）的需求。为了实现坐标轴的缩放和按比例绘制图形的两方面需求，我找了一个基于安卓端的可视化库，<a href="https://github.com/PhilJay/MPAndroidChart" target="_blank" rel="noopener">MPAndroidChart</a>。使用中还遇到很多问题，按下不表。目前这个项目仍处于开发阶段。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>参与上述项目之余，我还大大小小参与了一些其他项目，属于中途做技术实现工作，仅负责其中一小部分，有些也学到不少东西。</p>
<p>其中之一就是百度地图 Web 端的离线化，实现普通地图和卫星地图 + 路网的瓦片图离线化及相关功能（信息窗口，绘图等）。关于实现还新开了一个 <a href="https://github.com/muxfe/bmap-offline-for-web" target="_blank" rel="noopener">repo</a> 记录这项工作，以及用<a href="https://github.com/muxfe/BaiduMap_tiles" target="_blank" rel="noopener">爬虫</a> 快速下载百度瓦片图。</p>
<p>在微信小程序刚发布的时候，也趁热学习了一下小程序开发。当时小程序尚不允许个人开发者，所以仅在本地调试预览过效果。小程序刚出来时争论很大，但是开放十分缓慢，一开始几乎什么都不支持，入口很谨慎，生态非常封闭，这也是导致小程序开始备受争议的原因之一。现在小程序经过一年多时间的发展，感觉成熟和开放得多了，也在游戏、工具等方面获得了真正的便利。甚至支付宝跟风，还出现了一个“抄袭”事件。最近在做一个小程序的个人项目，类似 <a href="https://readhub.me/" target="_blank" rel="noopener">Readhub</a>，主要阅读关注的技术博客。</p>
<h2 id="参与比赛"><a href="#参与比赛" class="headerlink" title="参与比赛"></a>参与比赛</h2><p>本科的学业经历让我学到了竞赛的重要性，研究生便了解并参加了一些或大或小的比赛。</p>
<h3 id="华为算法大赛"><a href="#华为算法大赛" class="headerlink" title="华为算法大赛"></a>华为算法大赛</h3><p>第一个就是 5 月份华为举办的算法大赛，题目是一道综合性最优化问题，<a href="http://codecraft.huawei.com/home/detail" target="_blank" rel="noopener">大视频时代·布局</a>，关于服务器配置及满足低成本且满足所有终端用户的需求。由于实验室项目和其他个人原因，一个月的比赛时间一直拖到月底才开始查资料和写代码，用了遗传算法、蚁群、粒子群等等一言以蔽之的算法：瞎 JB 搜算法。主要分两步：第一步选择服务器个数；第二步：用最小费用最大流找出最优的服务器放置位置；第三步：不断重复前两步。结果当然是 GG。</p>
<h3 id="ThoughtWorks-结对编程"><a href="#ThoughtWorks-结对编程" class="headerlink" title="ThoughtWorks 结对编程"></a>ThoughtWorks 结对编程</h3><p>第二次是西安 ThoughtWorks 为了校招宣传而举办的一次小型结对编程比赛。大约 40 人随机组队，要求限时完成一个<a href="https://www.baidu.com/s?ie=UTF-8&amp;wd=%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F" target="_blank" rel="noopener">生命游戏</a>的实现。由于刚学习了 React，就用了 Dva + React + Antd 的实现方案，实现过程中遇到了一个组件状态更新问题，向 ThoughtWorks 的工程师求助未果，最后勉强完成了。结果是一个纪念奖，因为使用了一套前端工程化的东西。最后反思一下，这个游戏没有交互，核心是生命演化的规则和逻辑，应该用简单的 React 状态组件就可以了，完全用不上 Redux 和 Stateless 组件。</p>
<h3 id="百度之星-·-AI"><a href="#百度之星-·-AI" class="headerlink" title="百度之星 · AI"></a>百度之星 · AI</h3><p>第三次是百度举办的<a href="http://star.baidu.com/index/developer" target="_blank" rel="noopener">百度之星开发者大赛</a>，用百度的交互理解平台实现一个特定应用场景的对话机器人，做出产品成果。一开始花了比较长的时间理解百度出的<a href="http://ai.baidu.com/docs#/UNIT-guide/top" target="_blank" rel="noopener">这个产品</a>的使用方法和设计思路，根据示例构建对话样本，训练和验证样本。终于得到一个和官方给的差不多的结果，过了预选赛。决赛需要做出产品，让我们非常纠结，处于 idea 枯竭状态，最后决定就用预选赛训练的电影场景示例做产品，产品形式用了相对 app 更简单的微信公众号，在公众号的对话框里进行交互，结果虽然成功了，但是这个产品实在是太草率了，毫无疑问地 GG。</p>
<h2 id="技术之外"><a href="#技术之外" class="headerlink" title="技术之外"></a>技术之外</h2><p>回顾 2017 年，写下上面那些文字，乍看之下，我觉得做得事情还蛮多的，但是还有很多其他时间被我用在编程之外，让我觉得我自己还有“压榨”空间。首先就是健身，年初换了居住环境后，从 Keep 到健身房，花的时间变少了，不过健身效率更高，还能解决洗澡问题。健身的目的之一就是希望自己以后不需要买《程序员颈椎康复指南》之类的书。下半年跟实验室的同学开始热衷于报团登山，登山的过程非常有意思，累并快乐着，尤其是登顶之后的感觉，非常开心。</p>
<p>读书明显减少，感觉自己读书太较真，不会速读。但是也读了几本觉得可以推荐的好书，如吴晓波老师的《跌荡一百年》系列，之前就看过他的《激荡三十年》系列，作为经济企业史通俗读物来看，是十分不错的。技术书籍读了《代码整洁之道》觉得不错，内容虽然是基于 Java 的，但是思想可以推及其他编程语言。终于在 Kindle 上读完了 《1984》，乌托邦三部曲第二部，令人细思极恐，不寒而栗的一本小说。</p>
<p>编程之余总是喜欢用第三个屏刷剧，很少看国产剧的我在 2017 看了不少优秀的国产剧，网剧如《毛骗》、《白夜追凶》，影视剧如《大明王朝1566》，《人民的名义》。电影也是如此，《羞羞的铁拳》、《战狼2》都是口碑票房双赢之作。</p>
<p>旅行去了贵州和重庆，出差去了南京，对这些城市感受都很不错。“山水公园省，多彩贵州风。” 黄果树瀑布，西江苗寨，镇远古镇，少数民族风很浓厚，商业化相比其他古镇还可以接受。重庆是一座有味道的城市，不管是从影视剧里，还是舌尖上的中国，都有股麻辣火锅味，真正吃过之后让人难以忘怀。南京的鸭肠、粉丝汤也都很不错。南方城市空气质量相对较高，蓝天白云，青山绿水，令人心驰神往。</p>
<h3 id="2017-小计"><a href="#2017-小计" class="headerlink" title="2017 小计"></a>2017 小计</h3><ul>
<li>读书：7 本</li>
<li>刷剧：79 部</li>
<li>GitHub：9 个新 repo</li>
<li>Keep：4300 分钟</li>
<li>扇贝单词：358 天</li>
<li>健身：105 次</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>2017 感觉还是比较充实的，马上就要实习、找工作了，预感 2018 会更加忙碌和充实。希望找到不错的实习和工作。</p>
<p>以上。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转眼研究生学业过半，马上就要去找实习、找工作，回想两年前也是这个时候，觉得自己技术能力一片空白，只有一些玩具性质的学习项目，没有竞赛等亮眼的简历条目。&lt;/p&gt;
&lt;p&gt;而今又过了两年，有成长也有思考，自身能力提升的速度跟技术发展速度相比还是小巫见大巫。负责开发的项目多了，框架使用多了，也做了一些技术之外的事情，总体还是对自己的改变感到欣慰。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://muxfe.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="review" scheme="http://muxfe.github.io/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>hexo + fexo 搭建 GitHub-Pages 静态博客</title>
    <link href="http://muxfe.github.io/2016/07/19/hexo-blog/"/>
    <id>http://muxfe.github.io/2016/07/19/hexo-blog/</id>
    <published>2016-07-19T05:50:00.000Z</published>
    <updated>2018-01-09T08:54:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hexo-介绍"><a href="#hexo-介绍" class="headerlink" title="hexo 介绍"></a>hexo 介绍</h2><p>hexo 是一个使用 markdown 解析生成静态网页的框架，这样的框架还有 jekyll，前者基于 nodejs，后者基于 Ruby。但都使用 <code>.yml</code> 作为配置文件。之前用过 jekyll 搭建静态博客，但是在入门难易程度，包管理器生态环境和速度方面，貌似 hexo 更好一些。</p>
<p>hexo 默认使用 <a href="http://www.embeddedjs.com/" target="_blank" rel="external">ejs</a> 作为解析模板，默认 markdown 解析也与 GitHub 最为相似。书写，本地预览和部署到 GitHub repo 都非常方便。</p>
<a id="more"></a>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装-Git-Bash"><a href="#安装-Git-Bash" class="headerlink" title="安装 Git-Bash"></a>安装 Git-Bash</h3><ul>
<li>Win - <a href="https://git-scm.com/download/win" target="_blank" rel="external">download</a></li>
<li>Linux - <code>sudo apt-get install git</code></li>
</ul>
<p>在 Linux 上配置 Git 参考<a href="http://x-web.github.io/2015/11/21/using-git-on-ubuntu14/" target="_blank" rel="external">这里</a>.</p>
<h3 id="安装-Node"><a href="#安装-Node" class="headerlink" title="安装 Node"></a>安装 Node</h3><ul>
<li>Win - <a href="https://nodejs.org/en/download/" target="_blank" rel="external">download</a></li>
<li>Linux - <code>sudo apt-get install nodejs</code> or install <a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm</a></li>
</ul>
<p>查看 nodejs 和 npm 版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node -v</div><div class="line">npm -v</div></pre></td></tr></table></figure></p>
<h3 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> my-hexo-blog</div><div class="line">npm install hexo --save</div></pre></td></tr></table></figure>
<p>由于网络环境的原因，现在 npm 安装也非常慢，可以使用淘宝的 npm 镜像 - cnpm 来更快地安装包。参考<a href="https://npm.taobao.org/" target="_blank" rel="external">这里</a>.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div><div class="line">cnpm install hexo</div></pre></td></tr></table></figure>
<h2 id="测试运行-hexo"><a href="#测试运行-hexo" class="headerlink" title="测试运行 hexo"></a>测试运行 hexo</h2><h3 id="设置-hexo-运行脚本"><a href="#设置-hexo-运行脚本" class="headerlink" title="设置 hexo 运行脚本"></a>设置 hexo 运行脚本</h3><p>本人不太喜欢全局安装 npm 包，所以想要使用局部安装的 hexo，需要运行 <code>./node_modules/.bin/hexo</code>，但是这样很麻烦，可以在项目根目录中写相应的脚本来更好的使用 hexo 命令。</p>
<h4 id="BAT"><a href="#BAT" class="headerlink" title="BAT"></a>BAT</h4><p>在项目根目录下创建 <code>hexo.bat</code> 文件，内容如下：</p>
<figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">ECHO</span> off</div><div class="line"><span class="built_in">SET</span> PARAM=</div><div class="line">:LOOP</div><div class="line">    <span class="keyword">IF</span> [%<span class="number">1</span>]==[] <span class="keyword">GOTO</span> END</div><div class="line">    <span class="built_in">SET</span> PARAM=<span class="variable">%PARAM%</span> "%<span class="number">1</span>"</div><div class="line">    <span class="built_in">shift</span></div><div class="line">    <span class="keyword">GOTO</span> LOOP</div><div class="line">:END</div><div class="line">node_modules\.bin\hexo <span class="variable">%PARAM%</span></div></pre></td></tr></table></figure>
<h4 id="BASH"><a href="#BASH" class="headerlink" title="BASH"></a>BASH</h4><p>在项目根目录下创建 <code>hexo</code> 文件，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"node/node"</span> <span class="string">"./node_modules/.bin/hexo"</span> <span class="string">"<span class="variable">$@</span>"</span></div></pre></td></tr></table></figure>
<p>这样就可以在项目根目录下使用局部 hexo 命令了。</p>
<h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure>
<p>初始化完成后，会形成下面的 hexo 项目结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">./</div><div class="line">├─ public/ - 生成静态页面存放目录</div><div class="line">├─ source/ - md/css 等其他源文件</div><div class="line">│   ├─ _drafts/ - 草稿 hexo new draft &lt;title&gt;</div><div class="line">│   ├─ _post/ - 文章 hexo new &lt;title&gt;</div><div class="line">│   └─ .../</div><div class="line">├─ scaffolds/ - 脚手架，即新建文章（或其他类型）时初始化的模板</div><div class="line">├─ themes/</div><div class="line">│   ├─ landscape/ - 3.2.2 默认主题</div><div class="line">│   └─ .../</div><div class="line">├─ node_modules/</div><div class="line">├─ .deploy_git/ - 部署临时文件夹 hexo deploy</div><div class="line">├─ db.json - 本地 web 服务器使用的临时文件</div><div class="line">├─ _config.yml - hexo 配置文件</div><div class="line">└─ package.json - npm 包依赖描述文件</div></pre></td></tr></table></figure>
<h3 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h3><p>其中 public 目录存放 hexo 生成的静态页面。运行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate</div></pre></td></tr></table></figure>
<p>会创建 public 目录并生成所有静态页面。</p>
<p>为了在本地预览，hexo 还提供了一个本地 web 服务器环境。运行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure>
<p>运行成功后，通过访问 <a href="http://localhost:4000" target="_blank" rel="external">localhost:4000</a> 即可预览。</p>
<h2 id="使用-fexo-主题"><a href="#使用-fexo-主题" class="headerlink" title="使用 fexo 主题"></a>使用 fexo 主题</h2><h3 id="安装-fexo-主题"><a href="#安装-fexo-主题" class="headerlink" title="安装 fexo 主题"></a>安装 fexo 主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> my-hexo-blog/themes/</div><div class="line">git <span class="built_in">clone</span> https://github.com/forsigner/fexo.git</div></pre></td></tr></table></figure>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>修改博客根目录下的 <code>_config.yml</code> 中的 <code>theme</code> 为 <code>fexo</code>.</p>
<p>配置 <code>themes/fexo/_config.yml</code> 参考<a href="http://forsigner.com/2016/03/10/fexo-doc-zh-cn/" target="_blank" rel="external">这里</a>.</p>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># rss 支持</span></div><div class="line">npm install hexo-generator-feed --save</div><div class="line"><span class="comment"># sitemap 支持</span></div><div class="line">npm install hexo-generator-sitemap --save</div><div class="line"><span class="comment"># search 支持</span></div><div class="line">npm install hexo-generator-search --save</div></pre></td></tr></table></figure>
<h3 id="在-fexo-中自定义样式"><a href="#在-fexo-中自定义样式" class="headerlink" title="在 fexo 中自定义样式"></a>在 fexo 中自定义样式</h3><p>fexo 的自定义样式由其配置文件 <code>fexo/_config.yml</code> 中的 <code>personal_style:</code> 设置。对应值的路径相对与 <code>my-hexo-blog/source/</code>，如设置 <code>personal_style: /css/custom.css</code>，则应该创建 <code>my-hexo-blog/source/css/custom.css</code> 文件，并在其中设置样式。</p>
<h3 id="其他不错的主题"><a href="#其他不错的主题" class="headerlink" title="其他不错的主题"></a>其他不错的主题</h3><ul>
<li><a href="https://github.com/steven5538/hexo-theme-athena" target="_blank" rel="external">athena</a> - <em><a href="http://steven5538.tw/" target="_blank" rel="external">demo</a></em></li>
<li><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">next</a> - <em><a href="http://heroicyang.com/" target="_blank" rel="external">demo</a></em></li>
<li><a href="https://github.com/lenbo-ma/hexo-theme-vno" target="_blank" rel="external">vno</a> - <em><a href="http://mlongbo.com/" target="_blank" rel="external">demo</a></em></li>
</ul>
<h2 id="第三方服务"><a href="#第三方服务" class="headerlink" title="第三方服务"></a>第三方服务</h2><h3 id="使用百度统计"><a href="#使用百度统计" class="headerlink" title="使用百度统计"></a>使用百度统计</h3><p>在<a href="http://tongji.baidu.com/" target="_blank" rel="external">百度统计</a>申请账号，拿到自己的 token，并将其填入 <code>fexo/_config.yml</code> 中的 <code>baidu_analytics:</code> 属性值。</p>
<h3 id="使用-Disqus-评论"><a href="#使用-Disqus-评论" class="headerlink" title="使用 Disqus 评论"></a>使用 Disqus 评论</h3><p>在<a href="https://disqus.com/" target="_blank" rel="external">DISQUS</a>注册，并申请自己的二级域名。在个人账户页面，<code>Setting -&gt; Add Disqus To Site -&gt; GET STARTED</code>，然后填写相应信息。将自己申请的 Disqus 二级域名填如 <code>fexo/_config.yml</code> 中的 <code>disqus_shortname:</code> 属性值。</p>
<p>也可以使用<a href="http://duoshuo.com/" target="_blank" rel="external">多说</a>评论，修改 <code>duoshuo_shortname:</code> 并注释 Disqus 即可。</p>
<h2 id="使用-GitHub-Pages-部署网站"><a href="#使用-GitHub-Pages-部署网站" class="headerlink" title="使用 GitHub Pages 部署网站"></a>使用 <a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a> 部署网站</h2><p>GitHub 提供免费的 300M 网站空间，使得开发者可以静态展示自己的项目或网站。要使用 GitHub Pages 功能，首先申请 GitHub 账号，然后创建一个公开项目 <code>[yourname].github.io</code>。</p>
<p>修改 <code>my-hexo-blog/_config.yml</code> 中的 <code>deploy</code> 属性；</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">git</span></div><div class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/[yourname]/[yourname].github.io.git</span></div><div class="line"><span class="attr">  branch:</span> <span class="string">master</span></div><div class="line"><span class="attr">  message:</span> <span class="string">'update blog'</span></div></pre></td></tr></table></figure>
<p>设置好后，在根目录运行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy</div></pre></td></tr></table></figure>
<p>如果没有配置 ssh-key，需要输入 GitHub 的账号密码。</p>
<p>若不想使用 <code>hexo deploy</code> 命令，还可以自己 push <code>public/</code> 中的静态页面到 <code>[yourname].github.io.git</code> 代码仓库。可以先 clone 仓库到本地，然后拷贝其中的 <code>.git</code> 文件夹到 <code>my-hexo-blog/public/</code> 中，再使用 <code>git</code> 同步到远端库。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add -A</div><div class="line">git commit -m <span class="string">"update my blog"</span></div><div class="line">git push</div></pre></td></tr></table></figure>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="gulp-压缩"><a href="#gulp-压缩" class="headerlink" title="gulp 压缩"></a>gulp 压缩</h3><p>安装 gulp 相关依赖包</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">npm install gulp --save</div><div class="line">npm install gulp-htmlclean --save</div><div class="line">npm install gulp-htmlmin --save</div><div class="line">npm install gulp-imagemin --save</div><div class="line">npm install gulp-minify-css --save</div><div class="line">npm install gulp-uglify --save</div></pre></td></tr></table></figure>
<p>编写 gulpfile.js 文件</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</div><div class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</div><div class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>)</div><div class="line"><span class="comment">// 压缩 css</span></div><div class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</div><div class="line">       .pipe(minifycss())</div><div class="line">       .pipe(gulp.dest(<span class="string">'./public'</span>));</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 压缩 html</span></div><div class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"> <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</div><div class="line">   .pipe(htmlclean())</div><div class="line">   .pipe(htmlmin(&#123;</div><div class="line">        removeComments: <span class="literal">true</span>,</div><div class="line">        minifyJS: <span class="literal">true</span>,</div><div class="line">        minifyCSS: <span class="literal">true</span>,</div><div class="line">        minifyURLs: <span class="literal">true</span>,</div><div class="line">   &#125;))</div><div class="line">   .pipe(gulp.dest(<span class="string">'./public'</span>))</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 压缩 js</span></div><div class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.js'</span>)</div><div class="line">       .pipe(uglify())</div><div class="line">       .pipe(gulp.dest(<span class="string">'./public'</span>));</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 压缩图片</span></div><div class="line">gulp.task(<span class="string">'images'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   gulp.src(<span class="string">'./public/images/*.*'</span>)</div><div class="line">       .pipe(imagemin(&#123;</div><div class="line">           progressive: <span class="literal">true</span></div><div class="line">       &#125;))</div><div class="line">       .pipe(gulp.dest(<span class="string">'./public'</span>))</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>, [</div><div class="line">   <span class="string">'minify-html'</span>,<span class="string">'minify-css'</span>,<span class="string">'minify-js'</span>,<span class="string">'images'</span></div><div class="line">]);</div></pre></td></tr></table></figure>
<p>新建 gulp.bat</p>
<figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">ECHO</span> off</div><div class="line"><span class="built_in">SET</span> PARAM=</div><div class="line">:LOOP</div><div class="line">    <span class="keyword">IF</span> [%<span class="number">1</span>]==[] <span class="keyword">GOTO</span> END</div><div class="line">    <span class="built_in">SET</span> PARAM=<span class="variable">%PARAM%</span> "%<span class="number">1</span>"</div><div class="line">    <span class="built_in">shift</span></div><div class="line">    <span class="keyword">GOTO</span> LOOP</div><div class="line">:END</div><div class="line">node_modules\.bin\gulp <span class="variable">%PARAM%</span></div></pre></td></tr></table></figure>
<p>压缩 <code>public/</code> 下的静态页面</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp &lt;task&gt;</div></pre></td></tr></table></figure>
<p>p.s. 之前一直用 Grunt 做压缩，花了较长时间学习，积累经验，但是感觉理解还是不够，这次折腾发现 gulp 更容易上手和使用，<code>gulpfile.js</code> 可读性很高，简直相见恨晚。</p>
<h3 id="CDN-优化"><a href="#CDN-优化" class="headerlink" title="CDN 优化"></a>CDN 优化</h3><p>GitHub 提供的 web 服务是很好的，但是国内的网络环境使得访问 GitHub Pages 的速度惨不忍睹，提高访问速度的方法无外乎压缩源码、使用 CDN 等手段。上节试了压缩源码，但是性能提升十分有限。如果能把所需的所有 js/css/image 等文件以 CDN 方法部署，就能大大提高访问速度。hexo 目前还没有集成的方案，这方面还需要学习和研究，使用 CDN 优化网站访问速度。</p>
<h3 id="SEO-优化"><a href="#SEO-优化" class="headerlink" title="SEO 优化"></a>SEO 优化</h3><p>GitHub Pages 在 SEO 方面先天不足，由于百度不对其做索引，导致网站流量仅能通过有限的渠道被访问，也导致搭在 GitHub 上的博客大都无人问津。应该从两方面来提高网站流量，最主要的是提高内容质量，再一方面做好 SEO 优化。hexo 可以就有 seo 插件，生成 sitemap。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-sitemap --save</div><div class="line">npm install hexo-generator-baidu-sitemap --save</div><div class="line">npm install hexo-generator-seo-friendly-sitemap --save</div></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://www.jianshu.com/p/465830080ea9" target="_blank" rel="external">HEXO + Github,搭建属于自己的博客</a></li>
<li><a href="http://x-web.github.io/2015/11/21/using-git-on-ubuntu14/" target="_blank" rel="external">在 Ubuntu 14 上使用 Git</a></li>
<li><a href="http://forsigner.com/2016/03/10/fexo-doc-zh-cn/" target="_blank" rel="external">fexo-doc</a></li>
<li><a href="http://www.tuicool.com/articles/rUrYfeB" target="_blank" rel="external">搭建 Hexo 博客–增强篇</a></li>
<li><a href="https://yq.aliyun.com/articles/8608" target="_blank" rel="external">Hexo折腾记——性能优化篇</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;hexo-介绍&quot;&gt;&lt;a href=&quot;#hexo-介绍&quot; class=&quot;headerlink&quot; title=&quot;hexo 介绍&quot;&gt;&lt;/a&gt;hexo 介绍&lt;/h2&gt;&lt;p&gt;hexo 是一个使用 markdown 解析生成静态网页的框架，这样的框架还有 jekyll，前者基于 nodejs，后者基于 Ruby。但都使用 &lt;code&gt;.yml&lt;/code&gt; 作为配置文件。之前用过 jekyll 搭建静态博客，但是在入门难易程度，包管理器生态环境和速度方面，貌似 hexo 更好一些。&lt;/p&gt;
&lt;p&gt;hexo 默认使用 &lt;a href=&quot;http://www.embeddedjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ejs&lt;/a&gt; 作为解析模板，默认 markdown 解析也与 GitHub 最为相似。书写，本地预览和部署到 GitHub repo 都非常方便。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://muxfe.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="web" scheme="http://muxfe.github.io/tags/web/"/>
    
      <category term="hexo" scheme="http://muxfe.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Single Page Application - AngularJS</title>
    <link href="http://muxfe.github.io/2016/07/13/spa-angularjs/"/>
    <id>http://muxfe.github.io/2016/07/13/spa-angularjs/</id>
    <published>2016-07-13T08:03:20.000Z</published>
    <updated>2018-01-09T08:54:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Single-Page-Application-AngularJS"><a href="#Single-Page-Application-AngularJS" class="headerlink" title="Single Page Application - AngularJS"></a>Single Page Application - AngularJS</h1><p>最近半年做了不少单页面网站的开发，有静态也有动态的，主要基于 AngularJS（偶尔在我的 <a href="https://github.com/x-web/x-web.github.io" target="_blank" rel="external">blog</a> 中<br>用了 <a href="http://www.ractivejs.org/" target="_blank" rel="external">ractive</a>）。对这种重前端应用就着迷了，优点是前后端分工明确，高效（异步请求数据）且用户体验较好（没有频繁的页面跳转）。</p>
<p>没有任何框架能够适应一切场景。SPA 也有缺点，比如应用复杂代码量增加时，单页面应用就会有内存泄露等棘手问题，还有 SEO 优化等等问题。<br>SPA 适应的场景，如小型静态应用，与后台频繁交互（但不涉及重大安全问题）的应用等，我认为都是适合单页面应用的。</p>
<p>SPA 与 RESTful API 非常合适，只要确定接口规范，前后端开发就能较为独立地进行，前端通过 mock 异步数据，后端则直接测试接口，在前期不用集成前后端一起调试。</p>
<p>在此总结一下自己在基于 AngualrJS 搭建 SPA 应用的过程中学到的东西。仅限于 AngularJS 1.x。</p>
<a id="more"></a>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">./</div><div class="line">├─ src/</div><div class="line">│   ├─ app/</div><div class="line">│   │   ├─ [controller]/[.html, .controller.js, .css]</div><div class="line">│   │   ├─ app.js</div><div class="line">│   │   └─ app.controller.js</div><div class="line">│   ├─ component/[controller]/[.html, .controller.js*, .css*]</div><div class="line">│   ├─ fonts</div><div class="line">│   ├─ index.html</div><div class="line">│   ├─ 404.html</div><div class="line">│   ├─ favicon.ico</div><div class="line">│   └─ assets/[images, styles]</div><div class="line">├─ dist/</div><div class="line">├─ test/</div><div class="line">├─ Gruntfile.js</div><div class="line">├─ package.json</div><div class="line">└─ README.md</div></pre></td></tr></table></figure>
<h2 id="应用框架"><a href="#应用框架" class="headerlink" title="应用框架"></a>应用框架</h2><h3 id="入口-index-html"><a href="#入口-index-html" class="headerlink" title="入口 - index.html"></a>入口 - index.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"simpleApp"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- disable caches for all browser --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"max-age=0"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"no-store"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"expires"</span> <span class="attr">content</span>=<span class="string">"0"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"expires"</span> <span class="attr">content</span>=<span class="string">"Tue, 01 Jan 1980 1:00:00 GMT"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"pragma"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- stylesheets start --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- stylesheets end --&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-controller</span>=<span class="string">"MainCtrl"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-view</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- scripts start --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- scripts end --&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="初始化-app-app-js"><a href="#初始化-app-app-js" class="headerlink" title="初始化 - app/app.js"></a>初始化 - app/app.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> app = angular.module(<span class="string">'simpleApp'</span>, [<span class="string">'ngRoute'</span>])</div><div class="line">    .filter(<span class="string">'breakFilter'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!!text) &#123;</div><div class="line">          <span class="keyword">return</span> text.replace(<span class="regexp">/\n/g</span>, <span class="string">'&lt;br /&gt;'</span>);</div><div class="line">        &#125;</div><div class="line">      &#125;;</div><div class="line">    &#125;)</div><div class="line">    .config(<span class="function"><span class="keyword">function</span> (<span class="params">$routeProvider, $compileProvider</span>) </span>&#123;</div><div class="line">      $routeProvider</div><div class="line">        .when(<span class="string">'home'</span>, &#123;</div><div class="line">          templateUrl: <span class="string">'app/home/home.html'</span></div><div class="line">        &#125;)</div><div class="line">        .when(<span class="string">'somepage/somepath/:someparam?'</span>, &#123;</div><div class="line">          templateUrl: <span class="string">'app/somepage/somepage.html'</span></div><div class="line">        &#125;)</div><div class="line">        .otherwise(&#123;</div><div class="line">          redirectTo: <span class="string">'/home'</span></div><div class="line">        &#125;);</div><div class="line">        <span class="comment">// 数据绑定写入 a.href 时的白名单过滤</span></div><div class="line">        $compileProvider.aHrefSanitizationWhitelist(<span class="regexp">/^(http|https|file|tel):/</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>上面在初始化应用时添加了依赖 ngRoute ，这不是 AngularJS 原生自带的，需要单独引入 angular-route.js 文件，且必须保持与 angular.js 版本一致，否则会报错。</p>
<h3 id="控制器-controller-js"><a href="#控制器-controller-js" class="headerlink" title="控制器 - *.controller.js"></a>控制器 - *.controller.js</h3><p>以 MainCtrl 为例</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line">angular.module(<span class="string">'simpleApp'</span>).controller(<span class="string">'MainCtrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $http</span>) </span>&#123;</div><div class="line">  <span class="comment">// do something</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="ng-repeat"><a href="#ng-repeat" class="headerlink" title="ng-repeat"></a>ng-repeat</h3><p>ng-repeat 是一个非常好用的命令，类似 forEach，能够遍历数组或对象属性，循环创建 DOM 元素。<br>一个简单的例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">'SomeCtrl'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">  $scope.items = [&#123;<span class="attr">name</span>: <span class="string">'xm'</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'kyer'</span>&#125;]</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-repeat</span>=<span class="string">"item in items"</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="ng-if-ng-show"><a href="#ng-if-ng-show" class="headerlink" title="ng-if/ng-show"></a>ng-if/ng-show</h3><p>这两个命令的用法看起来很像，都是根据属性值的真假来决定是否显示该 DOM 元素，但是有一点很重要的区别。<br><code>ng-if</code> 值为 false 时，不会创建该 DOM 元素，而 <code>ng-show</code> 值为 false 时，该元素依然会被创建，只是通过设置 css 属性 <code>display: none;</code> 使其不显示而已。</p>
<h3 id="ng-src-ng-href"><a href="#ng-src-ng-href" class="headerlink" title="ng-src/ng-href"></a>ng-src/ng-href</h3><p>由于 AngularJS 的数据替换是在脚本加载完成以后进行的，所以如果写了类似</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;data.image&#125;&#125;"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>其中 img 标签的 src 值会在被替换前无法正确显示图片，因为根本不存在 <code>data.image</code> 路径的图片文件，这时候就需要 ng-src 命令了，它会在 AngularJS<br>替换完数据后为 img 标签添加 src 属性，这时候就是正确的值了。</p>
<p>同理，ng-href 也是解决在数据替换前，a 标签的不正确行为。</p>
<h2 id="一些问题的解决方法"><a href="#一些问题的解决方法" class="headerlink" title="一些问题的解决方法"></a>一些问题的解决方法</h2><h3 id="输出-html-标签"><a href="#输出-html-标签" class="headerlink" title="输出 html 标签"></a>输出 html 标签</h3><p>使用 <code>\{\{someHtmlStr\}\}</code>(注：双花括号与 hexo 模板解析冲突，故在此加<code>\</code>) 或 <code>ng-bind=&quot;someHtmlStr&quot;</code> 输出带有 html 标签的字符串时，<br>AngularJS 默认对其中的 html 标签做实体化转义，即将 <code>&lt;p&gt;Hi&lt;/p&gt;</code> 变成 <code>&amp;lt;p&amp;gt;Hi&amp;lt;/p&amp;gt;Hi</code>，然后浏览器上看到的就是<code>&lt;p&gt;Hi&lt;p&gt;</code>.</p>
<p>AngualrJS 出于安全考虑对字符串做了过滤，但有时候我们希望输出没有实体化的 html 标签，这时候需要做一些工作。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> someHtmlStr = <span class="string">'&lt;p&gt;Hi&lt;/p&gt;'</span>;</div><div class="line">$scope.someHtmlStr = $sce.trustAsHtml(someHtmlStr);</div></pre></td></tr></table></figure>
<p>$sce 服务中的 sce 是 ‘Stric Contextual Escaping’ 的缩写，即’严格的上下文模式’。</p>
<p>除了上面的方式，还可以写成自定义的 filter。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app.filter(<span class="string">'html2trusted'</span>, [<span class="string">'$sce'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$sce</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">text</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> $sce.trustAsHtml(text);</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-bind-html</span>=<span class="string">"someHtmlStr | html2trusted"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="ng-repeat-渲染完成事件监听"><a href="#ng-repeat-渲染完成事件监听" class="headerlink" title="ng-repeat 渲染完成事件监听"></a>ng-repeat 渲染完成事件监听</h3><p>有时候在一些第三方库时，会要求所需的 DOMContent 已经渲染完成，但 ng-repeat 命令渲染 DOM 和后续 js 代码执行时并行的，<br>我们必须监听 ng-repeat 完成时的事件，然后再对相应的 DOM 初始化第三方库。</p>
<p>一个比较容易理解的例子就是轮播组件，轮播内容用 ng-repeat 命令输出，但是初始化轮播时都要计算一些元素的 width/height 属性等，<br>由于代码是异步执行的，一旦进行了数据绑定，ng-repeat 渲染就会开始，而往往我们执行 <code>$(&quot;#slide&quot;).slide({})</code> 时渲染还未完成，<br>就会得到不正确的显示结果。所以，轮播初始化必须在 ng-repeat 渲染完成后执行。使用 AngularJS 自定义的属性标签可以实现监听 ngRepeatFinished 事件。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">'SomeCtrl'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">  $scope.items = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"></div><div class="line">  $scope.$on(<span class="string">'ngRepeatFinished'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ngRepeatFinishedEvent</span>) </span>&#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">  &#125;);</div><div class="line">&#125;)</div><div class="line">.directive(<span class="string">'onFinishRender'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$timeout</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    restrict: <span class="string">'A'</span>,</div><div class="line">    link: <span class="function"><span class="keyword">function</span> (<span class="params">scope, element, attr</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (scope.$last === <span class="literal">true</span>) &#123;</div><div class="line">        <span class="comment">// $timeout 将触发事件的操作放到事件队列的最后，以保证已全部渲染完成</span></div><div class="line">        $timeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">          scope.$emit(attr.onFinishRender);</div><div class="line">        &#125;);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-repeat</span>=<span class="string">"item in items"</span> <span class="attr">on-finish-render</span>=<span class="string">"ngRepeatFinished"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="lazy-loading"><a href="#lazy-loading" class="headerlink" title="lazy-loading"></a>lazy-loading</h3><p>在 ng-view 中渲染的 DOM 是不会解释其中包含的 script 标签的。这时候就需要用到写一个可以正常加载其中包含的 script 标签的指令。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">app.directive(<span class="string">'script'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    restrict: <span class="string">'E'</span>,</div><div class="line">    scope: <span class="literal">false</span>,</div><div class="line">    link: <span class="function"><span class="keyword">function</span>(<span class="params">scope, elem, attr</span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">      <span class="keyword">if</span> (attr.type===<span class="string">'text/javascript-lazy'</span>) &#123;</div><div class="line">        <span class="keyword">var</span> s = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</div><div class="line">        s.type = <span class="string">"text/javascript"</span>;</div><div class="line">        <span class="keyword">var</span> src = elem.attr(<span class="string">'src'</span>);</div><div class="line">        <span class="keyword">if</span>(src !== <span class="literal">undefined</span>) &#123;</div><div class="line">            s.src = src;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">var</span> code = elem.text();</div><div class="line">            s.text = code;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">document</span>.body.appendChild(s);</div><div class="line">        elem.remove();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript-lazy"</span> <span class="attr">src</span>=<span class="string">"somefile.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这样即使在模板中写 script 标签引入外部文件，就可以正常执行了。再查了一下，发现除了 script 标签，view, controller 等都可以 lazy loading，而且这个概念也不仅局限于 AngularJS.</p>
<h2 id="概念理解"><a href="#概念理解" class="headerlink" title="概念理解"></a>概念理解</h2><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p>AngularJS 使用依赖注入提高控制器代码的灵活性，通过参数名匹配注入相应的功能或服务。比如一直写的</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">'SomeCtrl'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope, $http, ...</span>) </span>&#123;</div><div class="line">  <span class="comment">// some code</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>参数列表中的 $scope, $http 等都是 AngularJS 原生的（前面有 <code>$</code>），参数列表的顺序可以是任意的，也不用列出所有可用的参数，只需选择自己用到的即可。</p>
<p>自己也可以定义服务、工厂函数等，AngularJS 的依赖注入机制提供了多种类型，包括</p>
<ul>
<li>值 - value</li>
<li>工厂 - factory</li>
<li>服务 - service</li>
<li>提供者 - $provide</li>
<li>常量 - constant</li>
</ul>
<p>目前还没用过这些类型，都是自己在控制器里写相应的代码。看过一点前端的 MVC，即使用自定义工厂映射 RESTful API 对应的资源，通过对这些对象的修改，会直接 ajax 请求更新到后台，非常方便，值得学习使用。</p>
<h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><p>AngularJS 最让人惊喜莫过于数据双向绑定了，对于表单的验证与提交，动态数据渲染 DOM 方面不能更好用了。对它的实现没有深入了解过多，<br>应该是用到了脏数据检查，将数据与 DOM 元素属性绑定，一旦数据修改了就更新，而且这种更新是双向的，DOM 内容可以直接修改 js 对象，js 对象值的修改也会直接反映到 DOM 中。 这块还要深入学习。</p>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>不论是前后端模板，在生成 html 内容时都有作用域的概念，如 JSP 中，通过将 <code>&lt;% %&gt;</code> 标签外的 html 代码变成字符串，标签内容代码生成 Java 代码，从而使得 JSP 页面内拥有了对应 Servlet 变量的作用域。</p>
<p>AngularJS 则通过 <code>$scope</code> 为页面模板绑定作用域，所有挂在 <code>$scope</code> 上的属性，可以直接在页面中使用。其中对于非 AngularJS 属性，如 <code>href</code>，<code>src</code>等要使用 AngularJS 模板需要使用花括号包起变量，而对于 AngularJS 的属性，则直接使用，如 <code>ng-if=&quot;someBoolean&quot;</code>.</p>
<p>AngularJS 的作用域还可以嵌套，在父作用域中定义的属性，可以在子作用域中访问。</p>
<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>ng-view 属性用于在页面的 hashtag 发生变化时，将对应的模板渲染到该属性对应的 DOM 容器中。视图可以嵌套，不过我还没遇到过这样的开发场景。</p>
<h3 id="directive"><a href="#directive" class="headerlink" title="directive"></a>directive</h3><p>这个可能是 AngularJS 最难学的部分了，属于高手进阶关卡。在开发中遇到问题时，总是能搜到各种各样的 directive 解决方案，然而并看不懂。</p>
<p>首先 directive 非常强大，可以做出自定义的一套标签库，还包括自定义属性等等。而 directive 就提供了解析和处理这些自定义标签/属性等的操作。</p>
<h2 id="我的相关项目"><a href="#我的相关项目" class="headerlink" title="我的相关项目"></a>我的相关项目</h2><ul>
<li><a href="https://github.com/xdsselab/sselab.org" target="_blank" rel="external">sselab</a></li>
<li><a href="http://rosenjx.com" target="_blank" rel="external">罗森光电科技</a></li>
<li><a href="http://git.oschina.net/x-web/document-check-tool-web" target="_blank" rel="external">文档格式检查工具</a></li>
<li><a href="http://git.oschina.net/x-web/pingpangke" target="_blank" rel="external">乒乓客</a></li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://segmentfault.com/a/1190000000639561" target="_blank" rel="external">angular中的ng-bind-html指令和$sce服务</a></li>
<li><a href="http://stackoverflow.com/questions/15207788/calling-a-function-when-ng-repeat-has-finished" target="_blank" rel="external">Calling a function when ng-repeat has finished</a></li>
<li><a href="http://stackoverflow.com/questions/19917774/why-ng-scope-is-added-to-javascript-inline-of-my-partial-view-and-makes-alert-no/22476888#22476888" target="_blank" rel="external">Why ng-scope is added to javascript inline of my partial view and makes alert not working?</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Single-Page-Application-AngularJS&quot;&gt;&lt;a href=&quot;#Single-Page-Application-AngularJS&quot; class=&quot;headerlink&quot; title=&quot;Single Page Application - AngularJS&quot;&gt;&lt;/a&gt;Single Page Application - AngularJS&lt;/h1&gt;&lt;p&gt;最近半年做了不少单页面网站的开发，有静态也有动态的，主要基于 AngularJS（偶尔在我的 &lt;a href=&quot;https://github.com/x-web/x-web.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;blog&lt;/a&gt; 中&lt;br&gt;用了 &lt;a href=&quot;http://www.ractivejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ractive&lt;/a&gt;）。对这种重前端应用就着迷了，优点是前后端分工明确，高效（异步请求数据）且用户体验较好（没有频繁的页面跳转）。&lt;/p&gt;
&lt;p&gt;没有任何框架能够适应一切场景。SPA 也有缺点，比如应用复杂代码量增加时，单页面应用就会有内存泄露等棘手问题，还有 SEO 优化等等问题。&lt;br&gt;SPA 适应的场景，如小型静态应用，与后台频繁交互（但不涉及重大安全问题）的应用等，我认为都是适合单页面应用的。&lt;/p&gt;
&lt;p&gt;SPA 与 RESTful API 非常合适，只要确定接口规范，前后端开发就能较为独立地进行，前端通过 mock 异步数据，后端则直接测试接口，在前期不用集成前后端一起调试。&lt;/p&gt;
&lt;p&gt;在此总结一下自己在基于 AngualrJS 搭建 SPA 应用的过程中学到的东西。仅限于 AngularJS 1.x。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://muxfe.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="angularjs" scheme="http://muxfe.github.io/tags/angularjs/"/>
    
      <category term="javascript" scheme="http://muxfe.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>2015 年终总结</title>
    <link href="http://muxfe.github.io/2016/01/01/2015-review/"/>
    <id>http://muxfe.github.io/2016/01/01/2015-review/</id>
    <published>2016-01-01T03:03:20.000Z</published>
    <updated>2018-01-09T08:54:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回顾2015"><a href="#回顾2015" class="headerlink" title="回顾2015"></a>回顾2015</h1><h2 id="学业"><a href="#学业" class="headerlink" title="学业"></a>学业</h2><p>从大三开始转向学习准备保研开始,终于在 2015 年如愿以偿.</p>
<p>之前一直在找工作和上研中纠结,最后还是打算上研,除了获得专业技能的提高之外,还需要更全面地学习和更好的发展.</p>
<p>在此回顾一下自己的 2015.</p>
<a id="more"></a>
<h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>3 月份有面试阿里的实习生,第一次面试到二面被刷,感觉还是很不爽的.发现自己的能力和亮点还是不够突出,通过小一年时间的学习和开发实践,可以说进步了很多.</p>
<p>从不了解 nodejs, AMD/CMD 等等,到现在已经用 nodejs 做了一个课程项目, 不仅了解了 AMD/CMD, 还对前端业界一些新框架和新技术也有所了解,尝试了 Angular. 其他如前端的工程化,测试,组件化等非常多的东西可以去”玩”.</p>
<p>前端技术的变化真的非常快,框架类库层出不穷,学习起来有时候也让人感到迷茫.多学习标准和思想,不变的东西,经得起时间考验的东西才最有价值.</p>
<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>大三下学习了算法导论,对一些经典算法和算法分析有了基本的认识,但是因为很久没有刷题了,算法实现能力下降很多.上个月开始坚持刷 leetcode, 然后用 github 打卡, 感觉想要每天坚持一件事真的很难.</p>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>我所在的实验室主要使用 Java 语言,需要把它作为后端开发的主力.今年做了几个 Java Web 的项目练手,对 Java 只能说不喜欢也不讨厌.Java 的跨平台特性确实很诱人,现在把开发平台转到 Linux 上,所有 Java 项目都能无缝衔接.当然前端的东西本来就是平台无关的~2333.</p>
<h3 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h3><p>看完<a href="https://github.com/JacksonTian" target="_blank" rel="external">朴灵</a>大大的 &lt;深入浅出 Nodejs&gt; 后,对 Nodejs 开发更是深深地痴迷.js 语言的灵活配合 Node 的异步 IO 和事件驱动简直完美.大四上的项目管理课需要开发一个类似淘宝的电商网站,我用 Nodejs + Express + Mongodb 完成了开发,感觉很好.12 月份还看了桑大的 <a href="https://github.com/base-n/koa-generator-examples" target="_blank" rel="external">koa-generator-examples</a>.发现有这么多方法来保持异步编程的优雅,缩小与同步编程的差异,感觉又要学习一波了.</p>
<h3 id="可视化-D3-与-mxGraph"><a href="#可视化-D3-与-mxGraph" class="headerlink" title="可视化: D3 与 mxGraph"></a>可视化: D3 与 mxGraph</h3><p>1 月份在实验室实习的时候,因为项目需要学习了一点 <a href="https://www.jgraph.com/javascript-graph-visualization-library.html" target="_blank" rel="external">mxGraph</a>,但是只接触了皮毛,不够深入.</p>
<p>8 月份实习时,学习了 <a href="https://github.com/mbostock/d3" target="_blank" rel="external">D3</a>,一个更强大的可视化 js 库,支持各种图表.主要学习和使用了饼图,引力图.也对 <a href="http://www.w3.org/TR/SVG/" target="_blank" rel="external">SVG</a> 有了些许了解.</p>
<h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p>Git 是一个出色的分布式版本控制工具,GitHub 则是一个神奇的网站,各大开源项目聚集地,GitHub Pages , Git Book 等等.2015 年在 GitHub 上连击了 40 天,是做项目管理那个项目的,想要坚持提交代码,无奈没有成功.2016 要好好使用它.</p>
<h2 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h2><ol>
<li><a href="http://book.douban.com/subject/3590768/" target="_blank" rel="external">JavaScript 语言精粹</a></li>
<li><a href="http://book.douban.com/subject/25892704/" target="_blank" rel="external">Nodejs 权威指南</a></li>
<li><a href="http://book.douban.com/subject/2368647/" target="_blank" rel="external">jQuery in Action</a></li>
<li><a href="http://book.douban.com/subject/1102259/" target="_blank" rel="external">人月神话</a></li>
<li><a href="http://book.douban.com/subject/6709809/" target="_blank" rel="external">暗时间</a></li>
<li><a href="http://book.douban.com/subject/25768396/" target="_blank" rel="external">深入浅出 Nodejs</a></li>
<li><a href="http://book.douban.com/subject/26256865/" target="_blank" rel="external">D3 数据可视化实战手册</a></li>
<li>Nodejs 实战</li>
<li><a href="http://book.douban.com/subject/19977785/" target="_blank" rel="external">MongoDB权威指南</a></li>
</ol>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="常去的网站"><a href="#常去的网站" class="headerlink" title="常去的网站"></a>常去的网站</h3><ol>
<li><a href="https://www.zhihu.com/people/darkdream" target="_blank" rel="external">知乎</a></li>
<li><a href="https://cnodejs.org/user/x-web" target="_blank" rel="external">CNode</a></li>
<li><a href="https://github.com/x-web" target="_blank" rel="external">GitHub</a></li>
<li><a href="http://v2ex.com/member/kyer" target="_blank" rel="external">V2EX</a></li>
<li><a href="https://www.google.com" target="_blank" rel="external">Google</a></li>
<li><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="external">阮一峰的网络日志</a></li>
<li><a href="https://leetcode.com/" target="_blank" rel="external">Leetcode</a></li>
</ol>
<h3 id="理财"><a href="#理财" class="headerlink" title="理财"></a>理财</h3><p>考了证券从业资格基础知识和交易两门.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;回顾2015&quot;&gt;&lt;a href=&quot;#回顾2015&quot; class=&quot;headerlink&quot; title=&quot;回顾2015&quot;&gt;&lt;/a&gt;回顾2015&lt;/h1&gt;&lt;h2 id=&quot;学业&quot;&gt;&lt;a href=&quot;#学业&quot; class=&quot;headerlink&quot; title=&quot;学业&quot;&gt;&lt;/a&gt;学业&lt;/h2&gt;&lt;p&gt;从大三开始转向学习准备保研开始,终于在 2015 年如愿以偿.&lt;/p&gt;
&lt;p&gt;之前一直在找工作和上研中纠结,最后还是打算上研,除了获得专业技能的提高之外,还需要更全面地学习和更好的发展.&lt;/p&gt;
&lt;p&gt;在此回顾一下自己的 2015.&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://muxfe.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="review" scheme="http://muxfe.github.io/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>最长回文子串</title>
    <link href="http://muxfe.github.io/2015/12/15/longest-palindrome/"/>
    <id>http://muxfe.github.io/2015/12/15/longest-palindrome/</id>
    <published>2015-12-15T04:03:20.000Z</published>
    <updated>2018-01-09T08:54:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a>最长回文子串</h2><p>最近在 leetcode 上刷算法题，重温一下 ACM 和 javascript 练手，发现了一道有趣的题目，最长回文子串。</p>
<p>开始的想法是反转字符串然后找出最大公共子串（LCS），但是 TLE 了。觉得可能是 js 本身效率太低，然后找了 leetcode 上别人写的算法分析，发现反转后找 LCS 是错误的，而且分析写得非常好，觉得应该好好学习下，记录在此。</p>
<h3 id="回文"><a href="#回文" class="headerlink" title="回文"></a>回文</h3><p>回文字符串就是指无论从那个方向读都是一样的，如<code>&#39;aba&#39;</code>就是一个简单的回文串。</p>
<p>开始的想法是先将字符串反转，然后找出它们的最长公共子串，即是要找最长回文串。</p>
<p><strong>然而这是错误的！！！</strong></p>
<a id="more"></a>
<p>比如 <code>&#39;abadfcdaba&#39;</code> 反转后是 <code>&#39;abadcfdaba&#39;</code>，它们的 LCS 是 <code>&#39;abad&#39;</code>，这显然不是一个回文串。</p>
<p>而它存在的原因就是原字符串中出现了两个一样的回文串，且有额外相同的部分分别出现在这两个回文串的前后。导致反转后的字符串除了回文部分相同外，还有非回文串也相同。</p>
<p>下面介绍几种不同的方法来计算 LPS。</p>
<h3 id="暴力搜索"><a href="#暴力搜索" class="headerlink" title="暴力搜索"></a>暴力搜索</h3><p>最简单的办法是找出字符串中的所有子串，判断其是否为回文串，然后记录下其中最大的回文子串即可。</p>
<p>暴搜无例外的话效率都很低，这个算法是 <code>O(N^3)</code> 的。首先找出所有子串 是 <code>O(N^2)</code> 的，然后判断其是否为回文是 <code>O(N)</code> 的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> longestPalindrome_bf = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!s) <span class="keyword">return</span> <span class="string">''</span>;</div><div class="line">  <span class="keyword">var</span> longest = s[<span class="number">0</span>], str, i, j, len;</div><div class="line">  <span class="keyword">var</span> isPalindrom = <span class="function"><span class="keyword">function</span> (<span class="params">left, right</span>) </span>&#123;</div><div class="line">    <span class="keyword">while</span> (left &lt; right &amp;&amp; s[left] === s[right]) &#123;</div><div class="line">      left++;</div><div class="line">      right--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> left &gt;= right;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span> (len = <span class="number">2</span>; len &lt;= s.length; len++) &#123;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</div><div class="line">      j = i + len - <span class="number">1</span>;</div><div class="line">      <span class="keyword">if</span> (isPalindrom(i, j)) &#123;</div><div class="line">        str = s.slice(i, j + <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (longest.length &lt; str.length) longest = str;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> longest;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><p>DP可能是解这个问题的一个好方法，然而算法复杂度依然是 O(N^2) 的，而且空间复杂度也是 O(N^2)。</p>
<p>我们假设用 <code>P[i][j]</code> 来表示 <code>s[i..j]</code> 是否是一个回文子串。</p>
<p>它的计算公式长这样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">P[i][j] = s[i] === s[j] &amp;&amp; P[i + <span class="number">1</span>][j - <span class="number">1</span>] ? <span class="literal">true</span> : <span class="literal">false</span>;</div></pre></td></tr></table></figure>
<p>算法实现如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> longestPalindrome_dp = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> i, j, len;</div><div class="line">  <span class="comment">// isPalindrom[i][j] represent s[i..j] is a parlindrom string or not.</span></div><div class="line">  <span class="keyword">var</span> isPalindrom = <span class="keyword">new</span> <span class="built_in">Array</span>(s.length);</div><div class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</div><div class="line">    isPalindrom[i] = <span class="keyword">new</span> <span class="built_in">Array</span>(s.length).fill(<span class="literal">false</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> maxLen = <span class="number">1</span>, longestBegin = <span class="number">0</span>;</div><div class="line">  <span class="comment">// initialize</span></div><div class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</div><div class="line">    isPalindrom[i][i] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">if</span> (i &lt; s.length - <span class="number">1</span> &amp;&amp; s[i] === s[i + <span class="number">1</span>]) &#123;</div><div class="line">      isPalindrom[i][i + <span class="number">1</span>] = <span class="literal">true</span>;</div><div class="line">      maxLen = <span class="number">2</span>;</div><div class="line">      longestBegin = i;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// compute</span></div><div class="line">  <span class="keyword">for</span> (len = <span class="number">3</span>; len &lt;= s.length; len++) &#123;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</div><div class="line">      j = len + i - <span class="number">1</span>;</div><div class="line">      <span class="keyword">if</span> (s[i] === s[j] &amp;&amp; isPalindrom[i + <span class="number">1</span>][j - <span class="number">1</span>]) &#123;</div><div class="line">        isPalindrom[i][j] = <span class="literal">true</span>;</div><div class="line">        maxLen = len;</div><div class="line">        longestBegin = i;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> s.slice(longestBegin, longestBegin + maxLen);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个实现在 leetcode 上 TLE 了。几乎跟暴搜一样慢。</p>
<p>ps. 我觉得跟 js 的数组对象有关。在 js 中处理二维数组比静态语言处理要慢的多。</p>
<h2 id="继续优化"><a href="#继续优化" class="headerlink" title="继续优化"></a>继续优化</h2><h3 id="降低空间复杂度"><a href="#降低空间复杂度" class="headerlink" title="降低空间复杂度"></a>降低空间复杂度</h3><p>DP 的空间复杂度是 <code>O(N^2)</code> 的，主要用来保存二维数组 <code>P[i][j]</code>，而且只用了一半。</p>
<p>我们可以把空间复杂度降到 <code>O(1)</code>，只存找到的最长回文串即可。枚举轴心位置，并进行扩展。如果是回文，则轴心两边的字符应该对称相等。</p>
<p>需要考虑到长度奇偶情况的不同，如果是奇数长度，轴心就是一个字符；如果是偶数长度，轴心则不在字符串中。</p>
<p>实现如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> longestPalindrome_enum = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!s) <span class="keyword">return</span> <span class="string">''</span>;</div><div class="line">  <span class="keyword">var</span> longest = s[<span class="number">0</span>];</div><div class="line">  <span class="keyword">var</span> expandAroundCenter = <span class="function"><span class="keyword">function</span> (<span class="params">left, right</span>) </span>&#123;</div><div class="line">    <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; s.length &amp;&amp; s[left] === s[right]) &#123;</div><div class="line">      left--;</div><div class="line">      right++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> s.slice(left + <span class="number">1</span>, right);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</div><div class="line">    <span class="comment">// 奇数</span></div><div class="line">    <span class="keyword">var</span> odd = expandAroundCenter(i, i);</div><div class="line">    <span class="keyword">if</span> (odd.length &gt; longest.length) longest = odd;</div><div class="line">    <span class="comment">// 偶数</span></div><div class="line">    <span class="keyword">var</span> even = expandAroundCenter(i, i + <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (longest.length &lt; even.length) longest = even;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> longest;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个实现在 leetcode 上 AC 了，用了 <code>236ms</code>。</p>
<h3 id="降低时间复杂度"><a href="#降低时间复杂度" class="headerlink" title="降低时间复杂度"></a>降低时间复杂度</h3><p>相比降低空间复杂度，降低时间复杂度要难得多。这里有一个 <code>O(N)</code> 时间复杂度的算法，叫做 <a href="https://en.wikipedia.org/wiki/Longest_palindromic_substring#Manacher.27s_algorithm" target="_blank" rel="external">Manacher</a> 算法。</p>
<p>能够从 <code>O(N^2)</code> 降到 <code>O(N)</code>，这个算法很巧妙。它首先解决了长度奇偶不同的问题。</p>
<p>通过向字符串中加入一些特殊字符来使长度均为<strong>奇数</strong>。特殊字符即为原字符串的字符集中没有的字符。如 <code>&#39;aba&#39;</code> 中插入 <code>&#39;#&#39;</code>，变成<code>&#39;#a#b#a#&#39;</code>。</p>
<p>然后提出了一个<strong>回文半径</strong>（P）的概念：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">T = # a # b # a # a # b # a #</div><div class="line">P = 0 1 0 3 0 1 6 1 0 3 0 1 0</div></pre></td></tr></table></figure>
<p>它代表了以该字符为轴心的回文串对折后的长度。由于插入了特殊字符，如果最长回文字符串的长度为偶数，则轴心会出现在 <code>&#39;#&#39;</code> 上。</p>
<p>容易看出上面的例子中，最大回文子串的轴心就是 <code>P</code> 为 6 的字符。最大回文子串为 <code>&#39;abaaba&#39;</code> ，长度刚好为 6.</p>
<p>这显然不是巧合，接下来就是要计算 <code>P</code>，记下其最大值及对应下标，即可。目标时间复杂度 <code>O(N)</code>。当然，这个算法最难的部分，就是计算 <code>P</code>。</p>
<p>正常计算 <code>P</code> 的话，时间复杂度依然是 <code>O(N^2)</code>，但是如果利用回文串的对称特性，减少搜索，就可以将复杂度降至 <code>O(N)</code>。</p>
<p>计算 <code>P</code> 就是以每一个字符为轴心计算回文半径，也就是从每一个字符开始向两边搜索，那么右边必然会搜索到尚未遍历到的字符，如果我们记下最大能搜索到的右边界 <code>R</code><br>。在后面的遍历搜索中，如果当前 <code>T[i]</code> 在边界内，即比最大右边界小，那么也就是在一个已搜索的回文子串中，假设 <code>i&#39;</code> 是 <code>i</code> 对应当前最大 <code>R</code> 的轴心 <code>C</code> 的对称位置（即 <code>T[i] == T[i&#39;]</code>）， 可以做出下面的结论：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if P[i&apos;] &lt; R-i</div><div class="line">then P[i] = P[i&apos;]</div><div class="line">else P[i] &gt;= P[i&apos;] （需要进一步扩展搜索得出）</div></pre></td></tr></table></figure>
<p>另一种情况，如果当前字符 <code>T[i]</code> 不在边界内，即我们不能得出任何结论，所以 <code>P[i] = 0</code>。</p>
<p>js 实现：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> longestPalindrome_manacher = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">  s = <span class="string">'^#'</span> + s.split(<span class="string">''</span>).join(<span class="string">'#'</span>) + <span class="string">'#$'</span>;</div><div class="line">  <span class="keyword">var</span> radius = <span class="keyword">new</span> <span class="built_in">Array</span>(s.length).fill(<span class="number">0</span>);</div><div class="line">  <span class="keyword">var</span> C = <span class="number">0</span>, centerIndex = <span class="number">0</span>, maxRight = <span class="number">0</span>, maxLen = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; s.length - <span class="number">1</span>; i++) &#123;</div><div class="line">    <span class="comment">// 计算初始回文半径, i' = 2 * C - i</span></div><div class="line">    radius[i] = (maxRight &gt; i) ? <span class="built_in">Math</span>.min(maxRight - i, radius[<span class="number">2</span> * C - i]) : <span class="number">0</span>;</div><div class="line">    <span class="comment">// 扩展半径</span></div><div class="line">    <span class="keyword">while</span> (s[i + <span class="number">1</span> + radius[i]] &amp;&amp; s[i - <span class="number">1</span> - radius[i]] &amp;&amp; s[i + <span class="number">1</span> + radius[i]] === s[i - <span class="number">1</span> - radius[i]]) radius[i]++;</div><div class="line">    <span class="comment">// 更新当前搜索的最大右边界和位置</span></div><div class="line">    <span class="keyword">if</span> (i + radius[i] &gt; maxRight) &#123;</div><div class="line">      C = i;</div><div class="line">      maxRight = i + radius[i];</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 更新最大回文串长度及位置</span></div><div class="line">    <span class="keyword">if</span> (maxLen &lt; radius[i]) &#123;</div><div class="line">      maxLen = radius[i];</div><div class="line">      centerIndex = i;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> s.slice((centerIndex - maxLen), (centerIndex + maxLen + <span class="number">1</span>)).split(<span class="string">'#'</span>).join(<span class="string">''</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>算法效果很好，在 leetcode 上运行时间是 <code>160ms</code>。</p>
<p>以上。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://articles.leetcode.com/2011/11/longest-palindromic-substring-part-i.html" target="_blank" rel="external">Longest Palindromic Substring Part I</a></li>
<li><a href="http://articles.leetcode.com/2011/11/longest-palindromic-substring-part-ii.html" target="_blank" rel="external">Longest Palindromic Substring Part II</a></li>
<li><a href="https://en.wikipedia.org/wiki/Longest_palindromic_substring#Manacher.27s_algorithm" target="_blank" rel="external">Wiki:Longest palindromic substring</a></li>
<li><a href="http://www.felix021.com/blog/read.php?2040" target="_blank" rel="external">Manacher’s ALGORITHM: O(n)时间求字符串的最长回文子串</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;最长回文子串&quot;&gt;&lt;a href=&quot;#最长回文子串&quot; class=&quot;headerlink&quot; title=&quot;最长回文子串&quot;&gt;&lt;/a&gt;最长回文子串&lt;/h2&gt;&lt;p&gt;最近在 leetcode 上刷算法题，重温一下 ACM 和 javascript 练手，发现了一道有趣的题目，最长回文子串。&lt;/p&gt;
&lt;p&gt;开始的想法是反转字符串然后找出最大公共子串（LCS），但是 TLE 了。觉得可能是 js 本身效率太低，然后找了 leetcode 上别人写的算法分析，发现反转后找 LCS 是错误的，而且分析写得非常好，觉得应该好好学习下，记录在此。&lt;/p&gt;
&lt;h3 id=&quot;回文&quot;&gt;&lt;a href=&quot;#回文&quot; class=&quot;headerlink&quot; title=&quot;回文&quot;&gt;&lt;/a&gt;回文&lt;/h3&gt;&lt;p&gt;回文字符串就是指无论从那个方向读都是一样的，如&lt;code&gt;&amp;#39;aba&amp;#39;&lt;/code&gt;就是一个简单的回文串。&lt;/p&gt;
&lt;p&gt;开始的想法是先将字符串反转，然后找出它们的最长公共子串，即是要找最长回文串。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;然而这是错误的！！！&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://muxfe.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="algorithm" scheme="http://muxfe.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>在 Ubuntu 14 上使用 Git</title>
    <link href="http://muxfe.github.io/2015/11/21/using-git-on-ubuntu14/"/>
    <id>http://muxfe.github.io/2015/11/21/using-git-on-ubuntu14/</id>
    <published>2015-11-21T02:03:20.000Z</published>
    <updated>2018-01-09T08:54:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在-Ubuntu-14-上使用-Git"><a href="#在-Ubuntu-14-上使用-Git" class="headerlink" title="在 Ubuntu 14 上使用 Git"></a>在 Ubuntu 14 上使用 Git</h1><p>之前一直用 GitHub for Windows ， GUI 帮我搞定了一切，不用关心背后发生了什么，就可以随意的 commit 和 push 代码。现在换到 Linux 环境之后发现没有那么方便了，全都要自己搞，虽然麻烦，但是学到不少东西。技术的事情还是偷不得懒的。</p>
<a id="more"></a>
<h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install git</div></pre></td></tr></table></figure>
<p>安装很简单，用 Ubuntu 的 apt-get 就可以了。</p>
<h2 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h2><p>安装了 git 还是不能将代码 push 到自己的 GitHub 上面，因为还没有认证。GitHub 提供了两种主要安全的连接方式，ssh 和 https 。<a href="https://help.github.com/articles/which-remote-url-should-i-use/" target="_blank" rel="external">GitHub 官方推荐使用 https</a>.</p>
<ul>
<li><strong>ssh</strong> 设置 ssh-key 比较麻烦，但后面使用就方便了</li>
<li><strong>https</strong> 使用用户名和密码进行身份认证， 每次 push 都要输入</li>
</ul>
<h3 id="SSH-认证"><a href="#SSH-认证" class="headerlink" title="SSH 认证"></a>SSH 认证</h3><p>SSH 使用 RSA 非对称加密算法来加密信息，下面生成与 GitHub 服务器通信认证所需的密钥。<br><a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="external">Generateing SSH key</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -b 4096 -C <span class="string">"grzpjdyc1653@126.com"</span></div></pre></td></tr></table></figure></p>
<p>保存 key 的位置选择默认位置 ( <code>~/.ssh/</code> ) 即可，直接按 Enter 。 然后需要为这个 key 设置一个passphrase（密码），后面会用到。最后就得到一个 key 了。</p>
<p>加入 key 到 ssh-agent<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure></p>
<p>加入 key 到 GitHub 账户</p>
<p>首先复制 key<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install xclip</div><div class="line">$ xclip -sel clip &lt; ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure></p>
<p>然后找到 GitHub -&gt; Profile -&gt; Settings -&gt; SSH keys -&gt; Add SSH key ， 将剪贴板的内容复制到 key 里。保存即可。</p>
<p>验证是否添加成功<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p>
<p>出现 Hi, username! 字样就是认证成功了。</p>
<h3 id="使用-SSH-连接-push-代码"><a href="#使用-SSH-连接-push-代码" class="headerlink" title="使用 SSH 连接 push 代码"></a>使用 SSH 连接 push 代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> repo</div><div class="line">$ git remote <span class="built_in">set</span>-url origin git+ssh://git@github.com/[username]/[repo].git</div></pre></td></tr></table></figure>
<p>这样就不用每次 push 都要输入用户名和密码了。</p>
<h2 id="提交和同步"><a href="#提交和同步" class="headerlink" title="提交和同步"></a>提交和同步</h2><p>将所有修改的文件加入缓存区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add -A</div></pre></td></tr></table></figure></p>
<p>提交修改<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit -m <span class="string">'message'</span></div></pre></td></tr></table></figure></p>
<p>推送到远程版本库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push</div></pre></td></tr></table></figure></p>
<p>设置 push.default<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global push.default matching</div><div class="line">$ git config --global push.default simple</div></pre></td></tr></table></figure></p>
<ul>
<li><strong>matching</strong> All branches</li>
<li><strong>simple</strong> Only the current branch</li>
</ul>
<p>从远程版本库同步</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;在-Ubuntu-14-上使用-Git&quot;&gt;&lt;a href=&quot;#在-Ubuntu-14-上使用-Git&quot; class=&quot;headerlink&quot; title=&quot;在 Ubuntu 14 上使用 Git&quot;&gt;&lt;/a&gt;在 Ubuntu 14 上使用 Git&lt;/h1&gt;&lt;p&gt;之前一直用 GitHub for Windows ， GUI 帮我搞定了一切，不用关心背后发生了什么，就可以随意的 commit 和 push 代码。现在换到 Linux 环境之后发现没有那么方便了，全都要自己搞，虽然麻烦，但是学到不少东西。技术的事情还是偷不得懒的。&lt;/p&gt;
    
    </summary>
    
      <category term="工具使用" scheme="http://muxfe.github.io/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="ubuntu" scheme="http://muxfe.github.io/tags/ubuntu/"/>
    
      <category term="git" scheme="http://muxfe.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>百度前端面试小记</title>
    <link href="http://muxfe.github.io/2015/09/17/baidu-interview/"/>
    <id>http://muxfe.github.io/2015/09/17/baidu-interview/</id>
    <published>2015-09-17T02:03:20.000Z</published>
    <updated>2018-01-09T08:54:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cloud.githubusercontent.com/assets/12498412/9929637/a3beaee0-5d60-11e5-8f8b-3ad2a675778c.jpg" alt="web_interview"></p>
<h1 id="百度前端面试（一面）"><a href="#百度前端面试（一面）" class="headerlink" title="百度前端面试（一面）"></a>百度前端面试（一面）</h1><p>尽管上周末百度的在线笔试非常不顺，这周一还是被通知第二天参加面试。面试直接安排在面试官所在的宾馆房间里，单独面试，由于只参加了一面，所以只能谈谈一面的感受。</p>
<p>百度是个比较崇尚技术的公司，一面全程都是技术基础知识和一个编程测试，没有问任何项目经验相关的东西，感觉有点像线下笔试了。</p>
<p>整个面试持续了一个小时。面试内容整理如下：</p>
<a id="more"></a>
<h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><p>必须的</p>
<h1 id="HTML相关"><a href="#HTML相关" class="headerlink" title="HTML相关"></a>HTML相关</h1><h3 id="一些标签"><a href="#一些标签" class="headerlink" title="一些标签"></a>一些标签</h3><ul>
<li>加粗</li>
<li>上/下标</li>
<li>pre</li>
</ul>
<h3 id="块级元素和行内元素举例及其区别"><a href="#块级元素和行内元素举例及其区别" class="headerlink" title="块级元素和行内元素举例及其区别"></a>块级元素和行内元素举例及其区别</h3><h3 id="DOCTYPE的作用"><a href="#DOCTYPE的作用" class="headerlink" title="DOCTYPE的作用"></a>DOCTYPE的作用</h3><h2 id="CSS布局相关"><a href="#CSS布局相关" class="headerlink" title="CSS布局相关"></a>CSS布局相关</h2><h3 id="元素居中的几种方法"><a href="#元素居中的几种方法" class="headerlink" title="元素居中的几种方法"></a>元素居中的几种方法</h3><h3 id="display分别可以取哪几个值及其相关含义"><a href="#display分别可以取哪几个值及其相关含义" class="headerlink" title="display分别可以取哪几个值及其相关含义"></a>display分别可以取哪几个值及其相关含义</h3><h3 id="bfc-block-formatting-context"><a href="#bfc-block-formatting-context" class="headerlink" title="bfc ( block formatting context )"></a>bfc ( block formatting context )</h3><h3 id="选择器优先级"><a href="#选择器优先级" class="headerlink" title="选择器优先级"></a>选择器优先级</h3><h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><h3 id="CSS预处理"><a href="#CSS预处理" class="headerlink" title="CSS预处理"></a>CSS预处理</h3><h2 id="JavaScript相关"><a href="#JavaScript相关" class="headerlink" title="JavaScript相关"></a>JavaScript相关</h2><h3 id="5个基本类型"><a href="#5个基本类型" class="headerlink" title="5个基本类型"></a>5个基本类型</h3><h3 id="原型链与继承"><a href="#原型链与继承" class="headerlink" title="原型链与继承"></a>原型链与继承</h3><h3 id="判断变量的类型"><a href="#判断变量的类型" class="headerlink" title="判断变量的类型"></a>判断变量的类型</h3><h3 id="setTimeout和setInterval"><a href="#setTimeout和setInterval" class="headerlink" title="setTimeout和setInterval"></a>setTimeout和setInterval</h3><h3 id="事件模型"><a href="#事件模型" class="headerlink" title="事件模型"></a>事件模型</h3><h3 id="ajax跨域"><a href="#ajax跨域" class="headerlink" title="ajax跨域"></a>ajax跨域</h3><h3 id="this指针和改变this指针的几种方法"><a href="#this指针和改变this指针的几种方法" class="headerlink" title="this指针和改变this指针的几种方法"></a>this指针和改变this指针的几种方法</h3><h3 id="一个编程题"><a href="#一个编程题" class="headerlink" title="一个编程题"></a>一个编程题</h3><p>写一个js函数，功能是将一段英文句子的所有单词首字母变成大写。</p>
<h2 id="HTTP相关"><a href="#HTTP相关" class="headerlink" title="HTTP相关"></a>HTTP相关</h2><h3 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h3><h3 id="状态码及其含义"><a href="#状态码及其含义" class="headerlink" title="状态码及其含义"></a>状态码及其含义</h3><h2 id="js库"><a href="#js库" class="headerlink" title="js库"></a>js库</h2><h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><h3 id="d3"><a href="#d3" class="headerlink" title="d3"></a>d3</h3><h3 id="svg和canvas"><a href="#svg和canvas" class="headerlink" title="svg和canvas"></a>svg和canvas</h3><h2 id="提问面试官"><a href="#提问面试官" class="headerlink" title="提问面试官"></a>提问面试官</h2><p>在前端如何选择技术方向深入学习</p>
<p>答曰：项目实践</p>
<h2 id="经验教训"><a href="#经验教训" class="headerlink" title="经验教训"></a>经验教训</h2><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>要自信。</p>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><p>编程能力应该是面试官非常看重的一点，这方面我在js的算法上并不十分熟练，导致编程题答得一塌糊涂。非常遗憾。</p>
<h3 id="沟通"><a href="#沟通" class="headerlink" title="沟通"></a>沟通</h3><p>每个问题应该仔细沟通然后理解，再作答。</p>
<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>一定要扎实。</p>
<p>一定要扎实。</p>
<p>一定要扎实。</p>
<p>（重要的话说三遍）</p>
<h3 id="简历"><a href="#简历" class="headerlink" title="简历"></a>简历</h3><p>我的简历上并无十分突出的东西，但是简洁、一目了然。还写上了GitHub的地址，虽然发现自己在GitHub上很水，我想面试官应该看了，这是一把双刃剑啊。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>总体来说，我答得有些问题并不十分准备，甚至是错误的，反映出我在项目实践方面的欠缺和基本功的不扎实。在平时项目中，对于很多知识或者问题，仅仅通过百度/google出答案然后就不再深究，也没有积累，是非常不好的。</p>
<p>相比今年7月份参加的阿里校招实习生的面试，我觉得自己已经进步了很多，从之前的方向不定和迷茫中渐渐找到了自己真正喜欢的东西。缺点是没有持续的学习和编码练习。</p>
<p>以此自勉。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/12498412/9929637/a3beaee0-5d60-11e5-8f8b-3ad2a675778c.jpg&quot; alt=&quot;web_interview&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;百度前端面试（一面）&quot;&gt;&lt;a href=&quot;#百度前端面试（一面）&quot; class=&quot;headerlink&quot; title=&quot;百度前端面试（一面）&quot;&gt;&lt;/a&gt;百度前端面试（一面）&lt;/h1&gt;&lt;p&gt;尽管上周末百度的在线笔试非常不顺，这周一还是被通知第二天参加面试。面试直接安排在面试官所在的宾馆房间里，单独面试，由于只参加了一面，所以只能谈谈一面的感受。&lt;/p&gt;
&lt;p&gt;百度是个比较崇尚技术的公司，一面全程都是技术基础知识和一个编程测试，没有问任何项目经验相关的东西，感觉有点像线下笔试了。&lt;/p&gt;
&lt;p&gt;整个面试持续了一个小时。面试内容整理如下：&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://muxfe.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="interview" scheme="http://muxfe.github.io/tags/interview/"/>
    
  </entry>
  
</feed>
